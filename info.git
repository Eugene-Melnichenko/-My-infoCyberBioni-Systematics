//Выполните следующие команды, чтобы Git узнал Ваше имя и электронную почту (измените на свои данные):
    git config --global user.name "Eugene Melnichenko"
    git config --global user.email "melnichenko.e.o@gmail.com"


//Чтобы создать git репозиторий из этого каталога, выполните команду:
    git init


//Создание репозитория не значит, что Git сразу же начал следить за всеми файлами в папке. 
//Файлы необходимо добавить вручную. Это дает контроль на файловой структурой Git репозитория и гарантирует, 
//что никакие конфиденциальные данные не попадут в открытый доступ без вашего согласия.
    git add index.html (Или для всех файлово git add .)
    git commit -m "Add my first code file";


//Команда git status возвращает информацию о репозитории: 
    git status

//Чтобы получить историю комитов в репозитории используйте команду: git log
    git log
//Или
    git log --oneline

//Изменение последнего коммита:
    git commit --amend -m "Update 'style.css'"
    git push --force


//Команда git revert — это операция для безопасной отмены изменений, действие которой направлено в будущее. Для отката изменений команда не удаляет из истории коммиты или родительские элементы, a создает новый коммит с отменой нужных действий. 


//Команда git push чаще всего используется для публикации выгружаемых локальных изменений в центральном репозитории. 
    git push origin master


//Команду git pull можно представить как версию команды svn update, только применимую в системе Git. 
//Это простой способ синхронизировать локальный репозиторий с вышестоящими изменениями. 
//На диаграмме ниже даны пояснения к каждому шагу процесса выполнения команды pull.
    git pull


//Команда git branch — это своего рода "менеджер веток". Она умеет перечислять ваши ветки, создавать новые, удалять и переименовывать их.
    git branch              //Посмотреть все ветки, по умолчанию мы находимся на основной ветке 'main'
    git branch eugene       //Создать новую ветку
    git checkout eugene     //Перейти на ветку 'eugene', в ней делаем свои изменения, коммити!
    git checkout main       //Снов переходим на ветку 'main'
    git merge eugene        //Делаем слияние веток, все изменения из ветки 'eugene' переносим у ветку 'main'
//или 
    git rebase eugene       //Если мы находимся на ветке 'master' и хотим внести изменения на ветки 'eugene'

    git checkout 434343     //Для перехода на нужный нам коммит
                            //Где 434343 - это хеш (обозначение, имя) коммита, причем можно указывать не весь хеш, а несколько начальных символов хеша.

//Чтобы удалить локальную ветку GIT, вы можете выполнить одну из следующих команд:
    git branch -d branch_name
    git branch -D branch_name
//Как вы можете заметить, эти команды, в разных вариациях использования, имеют 2 разных аргумента, d и D.
//Параметр -d означает --delete, который удалит локальную ветвь, только в случае, если вы смерджили её с какой-то из веток.
//Опция -D обозначает --delete --force, которая удаляет ветку независимо от ее статуса push или merge, так что будьте осторожны при её использовании!




__________________________________________________________________________________
.gitignore - файл, позволяющий указывать что в репозитории не следует отслеживать.
Что игнорировать: 
• скомпилированный исходный код; 
• пакеты и сжатые файлы; 
• логи; • базы данных; 
• вспомогательные файлы систем разработки (Visual Studio).

# Исключить все файлы с расширением .a 
    *.a
# Но отслеживать файл lib.a, даже если он подпадает под исключение выше 
    !lib.a
# Исключить файл TODO в корневой директории, но не файл в subdir/TODO
    /TODO
# Игнорировать все файлы в директории build/
    build/
# Игнорировать файл doc/notes.txt, но не файл doc/server/arch.txt
    doc/*.txt